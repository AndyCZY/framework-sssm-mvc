<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--使用mapper代理方法开发-->
<!--实现总结
    一对一查询:
    resultType：
		使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，
		需要增加列名对应的属性，即可完成映射。
		如果没有查询结果的特殊要求建议使用resultType。

    resultMap：
		需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，
		使用resultMap可以完成将关联查询映射pojo的属性中。
		resultMap可以实现延迟加载，resultType无法实现延迟加载。

    多对多查询:
		将查询用户购买的商品信息明细清单，（用户名、用户地址、购买商品名称、购买商品时间、购买商品数量）
		针对上边的需求就使用resultType将查询到的记录映射到一个扩展的pojo中，很简单实现明细清单的功能。
-->
<!--
    resultType：
		作用：将查询结果按照sql列名pojo属性名一致性映射到pojo中。
		场合：常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，
		此时可直接使用resultType将每一条记录映射到pojo中，
		在前端页面遍历list（list中是pojo）即可。

    resultMap：
    使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。
		association：
			作用：将关联查询信息映射到一个pojo对象中。
			场合：为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，
			比如：查询订单及关联用户信息。
			使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。

		collection：
			作用：将关联查询信息映射到一个list集合中。
			场合：为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，
			比如：查询用户权限范围模块及模块下的菜单，
			可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，
			这样的作的目的也是方便对查询结果集进行遍历查询。如果使用resultType无法将查询结果映射到list集合中。
-->
<mapper namespace="cn.com.czy.mybatis.two.mapper.OrdersMapperCustom">

    <!-- 核心：一对一的查询 resultMap-->
    <!-- 订单查询关联用户的resultMap 将整个查询的结果映射到cn.com.czy.mybatis.pojo.Orders中 -->
    <resultMap type="cn.com.czy.mybatis.pojo.Orders" id="OrdersUserResultMap">
        <!-- 配置映射的订单信息 -->
        <!-- id：指定查询列中的唯 一标识，订单信息的中的唯 一标识，如果有多个列组成唯一标识，配置多个id -->
        <!-- column：订单信息的唯 一标识 -->
        <!-- 列 property：订单信息的唯 一标识 列所映射到Orders中哪个属性 -->
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>


        <!-- 配置映射的关联的用户信息 -->
        <!-- association：用于映射关联查询单个对象的信息 -->
        <!-- property：要将关联查询的用户信息映射到Orders中哪个属性 -->
        <!-- javaType：user属性的类型 -->
        <association property="user" javaType="cn.com.czy.mybatis.pojo.User">
            <!-- id：关联查询用户的唯一标识 column：指定唯 一标识用户信息的列 javaType：映射到user的哪个属性 -->
            <id column="user_id" property="id"/>
            <result column="username" property="username"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>

    <!-- 核心：一对多的查询：订单及订单明细的resultMap -->
    <resultMap type="cn.com.czy.mybatis.pojo.Orders" id="OrdersAndOrderDetailResultMap" extends="OrdersUserResultMap">
        <!-- 订单信息 extends  OrdersUserResultMap-->
        <!-- 用户信息 extends  OrdersUserResultMap-->
        <!-- 使用extends继承，不用在中配置订单信息和用户信息的映射 -->

        <!-- 订单明细信息 一个订单关联查询出了多条明细，要使用collection进行映射 -->
        <!-- collection：对关联查询到多条记录映射到集合对象中 -->
        <!-- property：将关联查询到多条记录映射到cn.czy.mybatis.po.Orders哪个属性 -->
        <!-- ofType：指定映射到list集合属性中pojo的类型 -->
        <collection property="orderdetails" ofType="cn.com.czy.mybatis.pojo.Orderdetail">
            <!-- id：订单明细唯 一标识 property:要将订单明细的唯 一标识 映射到cn.czy.mybatis.po.Orderdetail的哪个属性 -->
            <id column="orderdetail_id" property="id"/>
            <result column="items_id" property="itemsId"/>
            <result column="items_num" property="itemsNum"/>
            <result column="orders_id" property="ordersId"/>
        </collection>
    </resultMap>


    <!-- 核心：多对多查询-->
    <!-- 查询用户及购买的商品 -->
    <resultMap type="cn.com.czy.mybatis.pojo.User" id="UserAndItemsResultMap">
        <!-- 用户信息 -->
        <id column="user_id" property="id"/>
        <result column="username" property="username"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

        <!-- 订单信息 一个用户对应多个订单，使用collection映射-->
		<!-- collection 与 association 的区别-->
        <collection property="ordersList" ofType="cn.com.czy.mybatis.pojo.Orders">
            <id column="id" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>

            <!-- 订单明细一个订单包括 多个明细-->
            <collection property="orderdetails" ofType="cn.com.czy.mybatis.pojo.Orderdetail">
                <id column="orderdetail_id" property="id"/>
                <result column="items_id" property="itemsId"/>
                <result column="items_num" property="itemsNum"/>
                <result column="orders_id" property="ordersId"/>

                <!-- 商品信息一个订单明细对应一个商品-->
                <association property="items" javaType="cn.com.czy.mybatis.pojo.Items">
                    <id column="items_id" property="id"/>
                    <result column="items_name" property="name"/>
                    <result column="items_detail" property="detail"/>
                    <result column="items_price" property="price"/>
                </association>

            </collection>
        </collection>
    </resultMap>


    <!--延迟加载:查询订单并且关联查询用户信息-->
    <resultMap id="OrderUserLazyLoadingResultMap" type="cn.com.czy.mybatis.pojo.Orders">
        <!--对订单信息进行映射配置  -->
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!-- 实现对用户信息进行延迟加载
			select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）
				要使用userMapper.xml中findUserById完成根据用户id(user_id)用户信息的查询，
				如果findUserById不在本mapper中需要前边加namespace
			column：订单信息中关联用户信息查询的列，是user_id
				关联查询的sql理解为：
			SELECT orders.*,
				(SELECT username FROM USER WHERE orders.user_id = user.id)username,
				(SELECT sex FROM USER WHERE orders.user_id = user.id)sex
			 FROM orders
         -->
        <association property="user" javaType="cn.com.czy.mybatis.pojo.User"
                     select="cn.com.czy.mybatis.web.tomcat.one.mapper.UserMapper.findUserById" column="user_id">
            <!-- 实现对用户信息进行延迟加载 -->
        </association>
    </resultMap>


    <!-- 核心：一对一的查询(使用resultType)-->
    <!-- 查询订单关联查询用户信息、OrdersCustom（里面的属性包含查询出来的字段属性）-->
    <select id="findOrdersUser" resultType="cn.com.czy.mybatis.pojo.OrdersCustom">
		SELECT
			orders.*,
			USER.username,
			USER.sex,
			USER.address
		FROM
			orders,USER
		WHERE orders.user_id = user.id
	</select>

    <!-- 核心：一对一的查询(使用resultmap):查询订单关联查询用户信息， -->
    <!-- Orders对象包含user对象 -->
    <select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
		SELECT
			orders.*,
			USER.username,
			USER.sex,
			USER.address
		FROM
			orders,USER
		WHERE orders.user_id
			= user.id
	</select>


    <!--  核心：一对多的查询(使用resultmap):查询订单关联查询用户信息， -->
    <select id="findOrdersAndOrderDetailResultMap" resultMap="OrdersUserResultMap">
      SELECT
      	  orders.*,
		  USER.username,
		  USER.sex,
		  USER.address,
		  orderdetail.id orderdetail_id,
		  orderdetail.items_id,
		  orderdetail.items_num,
		  orderdetail.orders_id
    FROM
      	orders,USER,orderdetail
    WHERE orders.user_id = user.id
    	AND orderdetail.orders_id=orders.id
    </select>


    <!-- 核心：多对多查询-->
    <!-- 查询用户及购买的商品 -->
    <select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
		SELECT
			  orders.*,
			  USER.username,
			  USER.sex,
			  USER.address,
			  orderdetail.id orderdetail_id,
			  orderdetail.items_id,
			  orderdetail.items_num,
			  orderdetail.orders_id,
			  items.name items_name,
			  items.detail items_detail,
			  items.price items_price
		FROM
			  orders,USER,
			  orderdetail,items
		WHERE orders.user_id = user.id
			AND orderdetail.orders_id=orders.id
			AND orderdetail.items_id = items.id
    </select>


    <!-- 延迟加载:查询订单并且关联查询用户信息-->
    <select id="findOrdersUserLazyLoading" resultMap="OrderUserLazyLoadingResultMap">
        SELECT * FROM orders ;
    </select>


</mapper>


